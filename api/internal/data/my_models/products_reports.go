// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductsReport is an object representing the database table.
type ProductsReport struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductID  int64     `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	ReporterID int64     `boil:"reporter_id" json:"reporter_id" toml:"reporter_id" yaml:"reporter_id"`
	Timestamp  time.Time `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	// fraud, bad quality etc
	ReportType        string `boil:"report_type" json:"report_type" toml:"report_type" yaml:"report_type"`
	ReportDescription string `boil:"report_description" json:"report_description" toml:"report_description" yaml:"report_description"`
	// eg pending, approved, declined
	ReportStatus int64 `boil:"report_status" json:"report_status" toml:"report_status" yaml:"report_status"`

	R *productsReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productsReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductsReportColumns = struct {
	ID                string
	ProductID         string
	ReporterID        string
	Timestamp         string
	ReportType        string
	ReportDescription string
	ReportStatus      string
}{
	ID:                "id",
	ProductID:         "product_id",
	ReporterID:        "reporter_id",
	Timestamp:         "timestamp",
	ReportType:        "report_type",
	ReportDescription: "report_description",
	ReportStatus:      "report_status",
}

var ProductsReportTableColumns = struct {
	ID                string
	ProductID         string
	ReporterID        string
	Timestamp         string
	ReportType        string
	ReportDescription string
	ReportStatus      string
}{
	ID:                "products_reports.id",
	ProductID:         "products_reports.product_id",
	ReporterID:        "products_reports.reporter_id",
	Timestamp:         "products_reports.timestamp",
	ReportType:        "products_reports.report_type",
	ReportDescription: "products_reports.report_description",
	ReportStatus:      "products_reports.report_status",
}

// Generated where

var ProductsReportWhere = struct {
	ID                whereHelperint64
	ProductID         whereHelperint64
	ReporterID        whereHelperint64
	Timestamp         whereHelpertime_Time
	ReportType        whereHelperstring
	ReportDescription whereHelperstring
	ReportStatus      whereHelperint64
}{
	ID:                whereHelperint64{field: "\"products_reports\".\"id\""},
	ProductID:         whereHelperint64{field: "\"products_reports\".\"product_id\""},
	ReporterID:        whereHelperint64{field: "\"products_reports\".\"reporter_id\""},
	Timestamp:         whereHelpertime_Time{field: "\"products_reports\".\"timestamp\""},
	ReportType:        whereHelperstring{field: "\"products_reports\".\"report_type\""},
	ReportDescription: whereHelperstring{field: "\"products_reports\".\"report_description\""},
	ReportStatus:      whereHelperint64{field: "\"products_reports\".\"report_status\""},
}

// ProductsReportRels is where relationship names are stored.
var ProductsReportRels = struct {
	Product  string
	Reporter string
}{
	Product:  "Product",
	Reporter: "Reporter",
}

// productsReportR is where relationships are stored.
type productsReportR struct {
	Product  *Product `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Reporter *User    `boil:"Reporter" json:"Reporter" toml:"Reporter" yaml:"Reporter"`
}

// NewStruct creates a new relationship struct
func (*productsReportR) NewStruct() *productsReportR {
	return &productsReportR{}
}

func (r *productsReportR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *productsReportR) GetReporter() *User {
	if r == nil {
		return nil
	}
	return r.Reporter
}

// productsReportL is where Load methods for each relationship are stored.
type productsReportL struct{}

var (
	productsReportAllColumns            = []string{"id", "product_id", "reporter_id", "timestamp", "report_type", "report_description", "report_status"}
	productsReportColumnsWithoutDefault = []string{"product_id", "reporter_id", "timestamp", "report_type", "report_description", "report_status"}
	productsReportColumnsWithDefault    = []string{"id"}
	productsReportPrimaryKeyColumns     = []string{"id"}
	productsReportGeneratedColumns      = []string{}
)

type (
	// ProductsReportSlice is an alias for a slice of pointers to ProductsReport.
	// This should almost always be used instead of []ProductsReport.
	ProductsReportSlice []*ProductsReport
	// ProductsReportHook is the signature for custom ProductsReport hook methods
	ProductsReportHook func(context.Context, boil.ContextExecutor, *ProductsReport) error

	productsReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productsReportType                 = reflect.TypeOf(&ProductsReport{})
	productsReportMapping              = queries.MakeStructMapping(productsReportType)
	productsReportPrimaryKeyMapping, _ = queries.BindMapping(productsReportType, productsReportMapping, productsReportPrimaryKeyColumns)
	productsReportInsertCacheMut       sync.RWMutex
	productsReportInsertCache          = make(map[string]insertCache)
	productsReportUpdateCacheMut       sync.RWMutex
	productsReportUpdateCache          = make(map[string]updateCache)
	productsReportUpsertCacheMut       sync.RWMutex
	productsReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productsReportAfterSelectMu sync.Mutex
var productsReportAfterSelectHooks []ProductsReportHook

var productsReportBeforeInsertMu sync.Mutex
var productsReportBeforeInsertHooks []ProductsReportHook
var productsReportAfterInsertMu sync.Mutex
var productsReportAfterInsertHooks []ProductsReportHook

var productsReportBeforeUpdateMu sync.Mutex
var productsReportBeforeUpdateHooks []ProductsReportHook
var productsReportAfterUpdateMu sync.Mutex
var productsReportAfterUpdateHooks []ProductsReportHook

var productsReportBeforeDeleteMu sync.Mutex
var productsReportBeforeDeleteHooks []ProductsReportHook
var productsReportAfterDeleteMu sync.Mutex
var productsReportAfterDeleteHooks []ProductsReportHook

var productsReportBeforeUpsertMu sync.Mutex
var productsReportBeforeUpsertHooks []ProductsReportHook
var productsReportAfterUpsertMu sync.Mutex
var productsReportAfterUpsertHooks []ProductsReportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductsReport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsReportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductsReport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsReportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductsReport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsReportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductsReport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsReportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductsReport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsReportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductsReport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsReportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductsReport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsReportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductsReport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsReportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductsReport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productsReportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductsReportHook registers your hook function for all future operations.
func AddProductsReportHook(hookPoint boil.HookPoint, productsReportHook ProductsReportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productsReportAfterSelectMu.Lock()
		productsReportAfterSelectHooks = append(productsReportAfterSelectHooks, productsReportHook)
		productsReportAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		productsReportBeforeInsertMu.Lock()
		productsReportBeforeInsertHooks = append(productsReportBeforeInsertHooks, productsReportHook)
		productsReportBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		productsReportAfterInsertMu.Lock()
		productsReportAfterInsertHooks = append(productsReportAfterInsertHooks, productsReportHook)
		productsReportAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		productsReportBeforeUpdateMu.Lock()
		productsReportBeforeUpdateHooks = append(productsReportBeforeUpdateHooks, productsReportHook)
		productsReportBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		productsReportAfterUpdateMu.Lock()
		productsReportAfterUpdateHooks = append(productsReportAfterUpdateHooks, productsReportHook)
		productsReportAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		productsReportBeforeDeleteMu.Lock()
		productsReportBeforeDeleteHooks = append(productsReportBeforeDeleteHooks, productsReportHook)
		productsReportBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		productsReportAfterDeleteMu.Lock()
		productsReportAfterDeleteHooks = append(productsReportAfterDeleteHooks, productsReportHook)
		productsReportAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		productsReportBeforeUpsertMu.Lock()
		productsReportBeforeUpsertHooks = append(productsReportBeforeUpsertHooks, productsReportHook)
		productsReportBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		productsReportAfterUpsertMu.Lock()
		productsReportAfterUpsertHooks = append(productsReportAfterUpsertHooks, productsReportHook)
		productsReportAfterUpsertMu.Unlock()
	}
}

// One returns a single productsReport record from the query.
func (q productsReportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductsReport, error) {
	o := &ProductsReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for products_reports")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductsReport records from the query.
func (q productsReportQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductsReportSlice, error) {
	var o []*ProductsReport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductsReport slice")
	}

	if len(productsReportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductsReport records in the query.
func (q productsReportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count products_reports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productsReportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if products_reports exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *ProductsReport) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// Reporter pointed to by the foreign key.
func (o *ProductsReport) Reporter(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ReporterID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productsReportL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductsReport interface{}, mods queries.Applicator) error {
	var slice []*ProductsReport
	var object *ProductsReport

	if singular {
		var ok bool
		object, ok = maybeProductsReport.(*ProductsReport)
		if !ok {
			object = new(ProductsReport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductsReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductsReport))
			}
		}
	} else {
		s, ok := maybeProductsReport.(*[]*ProductsReport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductsReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductsReport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productsReportR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productsReportR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductsReports = append(foreign.R.ProductsReports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductsReports = append(foreign.R.ProductsReports, local)
				break
			}
		}
	}

	return nil
}

// LoadReporter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productsReportL) LoadReporter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductsReport interface{}, mods queries.Applicator) error {
	var slice []*ProductsReport
	var object *ProductsReport

	if singular {
		var ok bool
		object, ok = maybeProductsReport.(*ProductsReport)
		if !ok {
			object = new(ProductsReport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductsReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductsReport))
			}
		}
	} else {
		s, ok := maybeProductsReport.(*[]*ProductsReport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductsReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductsReport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productsReportR{}
		}
		args[object.ReporterID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productsReportR{}
			}

			args[obj.ReporterID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reporter = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ReporterProductsReports = append(foreign.R.ReporterProductsReports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReporterID == foreign.ID {
				local.R.Reporter = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ReporterProductsReports = append(foreign.R.ReporterProductsReports, local)
				break
			}
		}
	}

	return nil
}

// SetProduct of the productsReport to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductsReports.
func (o *ProductsReport) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"products_reports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productsReportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &productsReportR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductsReports: ProductsReportSlice{o},
		}
	} else {
		related.R.ProductsReports = append(related.R.ProductsReports, o)
	}

	return nil
}

// SetReporter of the productsReport to the related item.
// Sets o.R.Reporter to related.
// Adds o to related.R.ReporterProductsReports.
func (o *ProductsReport) SetReporter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"products_reports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"reporter_id"}),
		strmangle.WhereClause("\"", "\"", 2, productsReportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReporterID = related.ID
	if o.R == nil {
		o.R = &productsReportR{
			Reporter: related,
		}
	} else {
		o.R.Reporter = related
	}

	if related.R == nil {
		related.R = &userR{
			ReporterProductsReports: ProductsReportSlice{o},
		}
	} else {
		related.R.ReporterProductsReports = append(related.R.ReporterProductsReports, o)
	}

	return nil
}

// ProductsReports retrieves all the records using an executor.
func ProductsReports(mods ...qm.QueryMod) productsReportQuery {
	mods = append(mods, qm.From("\"products_reports\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"products_reports\".*"})
	}

	return productsReportQuery{q}
}

// FindProductsReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductsReport(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductsReport, error) {
	productsReportObj := &ProductsReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"products_reports\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productsReportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from products_reports")
	}

	if err = productsReportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productsReportObj, err
	}

	return productsReportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductsReport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no products_reports provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productsReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productsReportInsertCacheMut.RLock()
	cache, cached := productsReportInsertCache[key]
	productsReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productsReportAllColumns,
			productsReportColumnsWithDefault,
			productsReportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productsReportType, productsReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productsReportType, productsReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"products_reports\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"products_reports\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into products_reports")
	}

	if !cached {
		productsReportInsertCacheMut.Lock()
		productsReportInsertCache[key] = cache
		productsReportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductsReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductsReport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productsReportUpdateCacheMut.RLock()
	cache, cached := productsReportUpdateCache[key]
	productsReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productsReportAllColumns,
			productsReportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update products_reports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"products_reports\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productsReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productsReportType, productsReportMapping, append(wl, productsReportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update products_reports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for products_reports")
	}

	if !cached {
		productsReportUpdateCacheMut.Lock()
		productsReportUpdateCache[key] = cache
		productsReportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productsReportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for products_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for products_reports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductsReportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productsReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"products_reports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productsReportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productsReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productsReport")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductsReport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no products_reports provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productsReportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productsReportUpsertCacheMut.RLock()
	cache, cached := productsReportUpsertCache[key]
	productsReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productsReportAllColumns,
			productsReportColumnsWithDefault,
			productsReportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productsReportAllColumns,
			productsReportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert products_reports, could not build update column list")
		}

		ret := strmangle.SetComplement(productsReportAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(productsReportPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert products_reports, could not build conflict column list")
			}

			conflict = make([]string, len(productsReportPrimaryKeyColumns))
			copy(conflict, productsReportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"products_reports\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(productsReportType, productsReportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productsReportType, productsReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert products_reports")
	}

	if !cached {
		productsReportUpsertCacheMut.Lock()
		productsReportUpsertCache[key] = cache
		productsReportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductsReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductsReport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductsReport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productsReportPrimaryKeyMapping)
	sql := "DELETE FROM \"products_reports\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from products_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for products_reports")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productsReportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productsReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from products_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for products_reports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductsReportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productsReportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productsReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"products_reports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productsReportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productsReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for products_reports")
	}

	if len(productsReportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductsReport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductsReport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductsReportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductsReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productsReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"products_reports\".* FROM \"products_reports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productsReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductsReportSlice")
	}

	*o = slice

	return nil
}

// ProductsReportExists checks if the ProductsReport row exists.
func ProductsReportExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"products_reports\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if products_reports exists")
	}

	return exists, nil
}

// Exists checks if the ProductsReport row exists.
func (o *ProductsReport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductsReportExists(ctx, exec, o.ID)
}
