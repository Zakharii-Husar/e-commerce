// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ShippingRate is an object representing the database table.
type ShippingRate struct {
	ID int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// e.g., standard, express, overnight
	Method   string        `boil:"method" json:"method" toml:"method" yaml:"method"`
	BaseRate types.Decimal `boil:"base_rate" json:"base_rate" toml:"base_rate" yaml:"base_rate"`

	R *shippingRateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shippingRateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShippingRateColumns = struct {
	ID       string
	Method   string
	BaseRate string
}{
	ID:       "id",
	Method:   "method",
	BaseRate: "base_rate",
}

var ShippingRateTableColumns = struct {
	ID       string
	Method   string
	BaseRate string
}{
	ID:       "shipping_rate.id",
	Method:   "shipping_rate.method",
	BaseRate: "shipping_rate.base_rate",
}

// Generated where

var ShippingRateWhere = struct {
	ID       whereHelperint64
	Method   whereHelperstring
	BaseRate whereHelpertypes_Decimal
}{
	ID:       whereHelperint64{field: "\"shipping_rate\".\"id\""},
	Method:   whereHelperstring{field: "\"shipping_rate\".\"method\""},
	BaseRate: whereHelpertypes_Decimal{field: "\"shipping_rate\".\"base_rate\""},
}

// ShippingRateRels is where relationship names are stored.
var ShippingRateRels = struct {
	Deliveries string
	Orders     string
}{
	Deliveries: "Deliveries",
	Orders:     "Orders",
}

// shippingRateR is where relationships are stored.
type shippingRateR struct {
	Deliveries DeliverySlice `boil:"Deliveries" json:"Deliveries" toml:"Deliveries" yaml:"Deliveries"`
	Orders     OrderSlice    `boil:"Orders" json:"Orders" toml:"Orders" yaml:"Orders"`
}

// NewStruct creates a new relationship struct
func (*shippingRateR) NewStruct() *shippingRateR {
	return &shippingRateR{}
}

func (r *shippingRateR) GetDeliveries() DeliverySlice {
	if r == nil {
		return nil
	}
	return r.Deliveries
}

func (r *shippingRateR) GetOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.Orders
}

// shippingRateL is where Load methods for each relationship are stored.
type shippingRateL struct{}

var (
	shippingRateAllColumns            = []string{"id", "method", "base_rate"}
	shippingRateColumnsWithoutDefault = []string{"method", "base_rate"}
	shippingRateColumnsWithDefault    = []string{"id"}
	shippingRatePrimaryKeyColumns     = []string{"id"}
	shippingRateGeneratedColumns      = []string{}
)

type (
	// ShippingRateSlice is an alias for a slice of pointers to ShippingRate.
	// This should almost always be used instead of []ShippingRate.
	ShippingRateSlice []*ShippingRate
	// ShippingRateHook is the signature for custom ShippingRate hook methods
	ShippingRateHook func(context.Context, boil.ContextExecutor, *ShippingRate) error

	shippingRateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shippingRateType                 = reflect.TypeOf(&ShippingRate{})
	shippingRateMapping              = queries.MakeStructMapping(shippingRateType)
	shippingRatePrimaryKeyMapping, _ = queries.BindMapping(shippingRateType, shippingRateMapping, shippingRatePrimaryKeyColumns)
	shippingRateInsertCacheMut       sync.RWMutex
	shippingRateInsertCache          = make(map[string]insertCache)
	shippingRateUpdateCacheMut       sync.RWMutex
	shippingRateUpdateCache          = make(map[string]updateCache)
	shippingRateUpsertCacheMut       sync.RWMutex
	shippingRateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shippingRateAfterSelectMu sync.Mutex
var shippingRateAfterSelectHooks []ShippingRateHook

var shippingRateBeforeInsertMu sync.Mutex
var shippingRateBeforeInsertHooks []ShippingRateHook
var shippingRateAfterInsertMu sync.Mutex
var shippingRateAfterInsertHooks []ShippingRateHook

var shippingRateBeforeUpdateMu sync.Mutex
var shippingRateBeforeUpdateHooks []ShippingRateHook
var shippingRateAfterUpdateMu sync.Mutex
var shippingRateAfterUpdateHooks []ShippingRateHook

var shippingRateBeforeDeleteMu sync.Mutex
var shippingRateBeforeDeleteHooks []ShippingRateHook
var shippingRateAfterDeleteMu sync.Mutex
var shippingRateAfterDeleteHooks []ShippingRateHook

var shippingRateBeforeUpsertMu sync.Mutex
var shippingRateBeforeUpsertHooks []ShippingRateHook
var shippingRateAfterUpsertMu sync.Mutex
var shippingRateAfterUpsertHooks []ShippingRateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShippingRate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingRateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShippingRate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingRateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShippingRate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingRateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShippingRate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingRateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShippingRate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingRateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShippingRate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingRateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShippingRate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingRateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShippingRate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingRateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShippingRate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingRateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShippingRateHook registers your hook function for all future operations.
func AddShippingRateHook(hookPoint boil.HookPoint, shippingRateHook ShippingRateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shippingRateAfterSelectMu.Lock()
		shippingRateAfterSelectHooks = append(shippingRateAfterSelectHooks, shippingRateHook)
		shippingRateAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		shippingRateBeforeInsertMu.Lock()
		shippingRateBeforeInsertHooks = append(shippingRateBeforeInsertHooks, shippingRateHook)
		shippingRateBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		shippingRateAfterInsertMu.Lock()
		shippingRateAfterInsertHooks = append(shippingRateAfterInsertHooks, shippingRateHook)
		shippingRateAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		shippingRateBeforeUpdateMu.Lock()
		shippingRateBeforeUpdateHooks = append(shippingRateBeforeUpdateHooks, shippingRateHook)
		shippingRateBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		shippingRateAfterUpdateMu.Lock()
		shippingRateAfterUpdateHooks = append(shippingRateAfterUpdateHooks, shippingRateHook)
		shippingRateAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		shippingRateBeforeDeleteMu.Lock()
		shippingRateBeforeDeleteHooks = append(shippingRateBeforeDeleteHooks, shippingRateHook)
		shippingRateBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		shippingRateAfterDeleteMu.Lock()
		shippingRateAfterDeleteHooks = append(shippingRateAfterDeleteHooks, shippingRateHook)
		shippingRateAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		shippingRateBeforeUpsertMu.Lock()
		shippingRateBeforeUpsertHooks = append(shippingRateBeforeUpsertHooks, shippingRateHook)
		shippingRateBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		shippingRateAfterUpsertMu.Lock()
		shippingRateAfterUpsertHooks = append(shippingRateAfterUpsertHooks, shippingRateHook)
		shippingRateAfterUpsertMu.Unlock()
	}
}

// One returns a single shippingRate record from the query.
func (q shippingRateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShippingRate, error) {
	o := &ShippingRate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shipping_rate")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShippingRate records from the query.
func (q shippingRateQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShippingRateSlice, error) {
	var o []*ShippingRate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShippingRate slice")
	}

	if len(shippingRateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShippingRate records in the query.
func (q shippingRateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shipping_rate rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shippingRateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shipping_rate exists")
	}

	return count > 0, nil
}

// Deliveries retrieves all the delivery's Deliveries with an executor.
func (o *ShippingRate) Deliveries(mods ...qm.QueryMod) deliveryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deliveries\".\"shipping_rate_id\"=?", o.ID),
	)

	return Deliveries(queryMods...)
}

// Orders retrieves all the order's Orders with an executor.
func (o *ShippingRate) Orders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"shipping_rate_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// LoadDeliveries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingRateL) LoadDeliveries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingRate interface{}, mods queries.Applicator) error {
	var slice []*ShippingRate
	var object *ShippingRate

	if singular {
		var ok bool
		object, ok = maybeShippingRate.(*ShippingRate)
		if !ok {
			object = new(ShippingRate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingRate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingRate))
			}
		}
	} else {
		s, ok := maybeShippingRate.(*[]*ShippingRate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingRate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingRate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shippingRateR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingRateR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`deliveries`),
		qm.WhereIn(`deliveries.shipping_rate_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deliveries")
	}

	var resultSlice []*Delivery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deliveries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deliveries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deliveries")
	}

	if len(deliveryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Deliveries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deliveryR{}
			}
			foreign.R.ShippingRate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShippingRateID {
				local.R.Deliveries = append(local.R.Deliveries, foreign)
				if foreign.R == nil {
					foreign.R = &deliveryR{}
				}
				foreign.R.ShippingRate = local
				break
			}
		}
	}

	return nil
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingRateL) LoadOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingRate interface{}, mods queries.Applicator) error {
	var slice []*ShippingRate
	var object *ShippingRate

	if singular {
		var ok bool
		object, ok = maybeShippingRate.(*ShippingRate)
		if !ok {
			object = new(ShippingRate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingRate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingRate))
			}
		}
	} else {
		s, ok := maybeShippingRate.(*[]*ShippingRate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingRate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingRate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shippingRateR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingRateR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.shipping_rate_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Orders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.ShippingRate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShippingRateID {
				local.R.Orders = append(local.R.Orders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.ShippingRate = local
				break
			}
		}
	}

	return nil
}

// AddDeliveries adds the given related objects to the existing relationships
// of the shipping_rate, optionally inserting them as new records.
// Appends related to o.R.Deliveries.
// Sets related.R.ShippingRate appropriately.
func (o *ShippingRate) AddDeliveries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Delivery) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShippingRateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deliveries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_rate_id"}),
				strmangle.WhereClause("\"", "\"", 2, deliveryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShippingRateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shippingRateR{
			Deliveries: related,
		}
	} else {
		o.R.Deliveries = append(o.R.Deliveries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deliveryR{
				ShippingRate: o,
			}
		} else {
			rel.R.ShippingRate = o
		}
	}
	return nil
}

// AddOrders adds the given related objects to the existing relationships
// of the shipping_rate, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.ShippingRate appropriately.
func (o *ShippingRate) AddOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShippingRateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_rate_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShippingRateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shippingRateR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				ShippingRate: o,
			}
		} else {
			rel.R.ShippingRate = o
		}
	}
	return nil
}

// ShippingRates retrieves all the records using an executor.
func ShippingRates(mods ...qm.QueryMod) shippingRateQuery {
	mods = append(mods, qm.From("\"shipping_rate\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shipping_rate\".*"})
	}

	return shippingRateQuery{q}
}

// FindShippingRate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShippingRate(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ShippingRate, error) {
	shippingRateObj := &ShippingRate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shipping_rate\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shippingRateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shipping_rate")
	}

	if err = shippingRateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shippingRateObj, err
	}

	return shippingRateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShippingRate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shipping_rate provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingRateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shippingRateInsertCacheMut.RLock()
	cache, cached := shippingRateInsertCache[key]
	shippingRateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shippingRateAllColumns,
			shippingRateColumnsWithDefault,
			shippingRateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shippingRateType, shippingRateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shippingRateType, shippingRateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shipping_rate\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shipping_rate\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shipping_rate")
	}

	if !cached {
		shippingRateInsertCacheMut.Lock()
		shippingRateInsertCache[key] = cache
		shippingRateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShippingRate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShippingRate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shippingRateUpdateCacheMut.RLock()
	cache, cached := shippingRateUpdateCache[key]
	shippingRateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shippingRateAllColumns,
			shippingRatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shipping_rate, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shipping_rate\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shippingRatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shippingRateType, shippingRateMapping, append(wl, shippingRatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shipping_rate row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shipping_rate")
	}

	if !cached {
		shippingRateUpdateCacheMut.Lock()
		shippingRateUpdateCache[key] = cache
		shippingRateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shippingRateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shipping_rate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shipping_rate")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShippingRateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shipping_rate\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shippingRatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shippingRate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shippingRate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShippingRate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no shipping_rate provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingRateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shippingRateUpsertCacheMut.RLock()
	cache, cached := shippingRateUpsertCache[key]
	shippingRateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			shippingRateAllColumns,
			shippingRateColumnsWithDefault,
			shippingRateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shippingRateAllColumns,
			shippingRatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shipping_rate, could not build update column list")
		}

		ret := strmangle.SetComplement(shippingRateAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(shippingRatePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert shipping_rate, could not build conflict column list")
			}

			conflict = make([]string, len(shippingRatePrimaryKeyColumns))
			copy(conflict, shippingRatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shipping_rate\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(shippingRateType, shippingRateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shippingRateType, shippingRateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shipping_rate")
	}

	if !cached {
		shippingRateUpsertCacheMut.Lock()
		shippingRateUpsertCache[key] = cache
		shippingRateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShippingRate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShippingRate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShippingRate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shippingRatePrimaryKeyMapping)
	sql := "DELETE FROM \"shipping_rate\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shipping_rate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shipping_rate")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shippingRateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shippingRateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shipping_rate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shipping_rate")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShippingRateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shippingRateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shipping_rate\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingRatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shippingRate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shipping_rate")
	}

	if len(shippingRateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShippingRate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShippingRate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingRateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShippingRateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shipping_rate\".* FROM \"shipping_rate\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingRatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShippingRateSlice")
	}

	*o = slice

	return nil
}

// ShippingRateExists checks if the ShippingRate row exists.
func ShippingRateExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shipping_rate\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shipping_rate exists")
	}

	return exists, nil
}

// Exists checks if the ShippingRate row exists.
func (o *ShippingRate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShippingRateExists(ctx, exec, o.ID)
}
