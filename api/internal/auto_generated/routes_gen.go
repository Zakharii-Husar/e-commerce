// Package auto_generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package auto_generated

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (PATCH /api/admin/suspend/product/{product_id})
	SuspendProduct(c *gin.Context, productId string)

	// (PATCH /api/admin/suspend/user/{user_id})
	SuspendUser(c *gin.Context, userId string)

	// (GET /api/admin/transactions)
	GetAllTransactions(c *gin.Context)

	// (POST /api/auth/recover_password)
	RecoverPassword(c *gin.Context)

	// (POST /api/auth/sign_in)
	SignIn(c *gin.Context)

	// (GET /api/auth/sign_out)
	SignOut(c *gin.Context)

	// (POST /api/auth/sign_up)
	SignUp(c *gin.Context)

	// (GET /api/cart/)
	GetCartItems(c *gin.Context)

	// (DELETE /api/cart/items/{product_id})
	DeleteItemFromCart(c *gin.Context, productId string)

	// (PATCH /api/cart/items/{product_id})
	UpdateItemQuantity(c *gin.Context, productId string)

	// (POST /api/cart/items/{product_id})
	AddItemToCart(c *gin.Context, productId string)

	// (GET /api/orders/)
	GetOrders(c *gin.Context)

	// (GET /api/orders/items/{order_id})
	GetOrderById(c *gin.Context, orderId string)

	// (PATCH /api/orders/items/{order_id}/cancel)
	CancelOrder(c *gin.Context, orderId string)

	// (PATCH /api/orders/items/{order_id}/update)
	UpdateOrder(c *gin.Context, orderId string)

	// (GET /api/products/)
	GetProducts(c *gin.Context)

	// (POST /api/products/)
	CreateProduct(c *gin.Context)

	// (DELETE /api/products/{product_id})
	DeleteProductById(c *gin.Context, productId string)

	// (GET /api/products/{product_id})
	GetProductById(c *gin.Context, productId string)

	// (PUT /api/products/{product_id})
	UpdateProductById(c *gin.Context, productId string)

	// (POST /api/products/{product_id}/attachement)
	UploadProductAttachment(c *gin.Context, productId string)

	// (GET /api/products/{product_id}/attachement/{attachement_id})
	GetProductAttachmentById(c *gin.Context, productId string, attachementId string)

	// (GET /api/products/{product_id}/questions)
	GetProductQuestions(c *gin.Context, productId string)

	// (POST /api/products/{product_id}/questions)
	PostProductQuestion(c *gin.Context, productId string)

	// (POST /api/products/{product_id}/questions/{question_id}/respond)
	PostQuestionAnswer(c *gin.Context, productId string, questionId string)

	// (GET /api/products/{product_id}/reviews)
	GetProductReviews(c *gin.Context, productId string)

	// (POST /api/products/{product_id}/reviews)
	PostProductReview(c *gin.Context, productId string)

	// (POST /api/products/{product_id}/reviews/{review_id}/respond)
	RespondToReview(c *gin.Context, productId string, reviewId string)

	// (DELETE /api/products/{product_id}attachement/{attachement_id})
	DeleteProductAttachmentById(c *gin.Context, productId string, attachementId string)

	// (GET /api/sellers/inventory)
	GetInventory(c *gin.Context)

	// (GET /api/users/)
	GetUsers(c *gin.Context)

	// (GET /api/users/search)
	SearchUsers(c *gin.Context, params SearchUsersParams)

	// (DELETE /api/users/{user_id})
	DeleteUser(c *gin.Context, userId string)

	// (GET /api/users/{user_id})
	GetUserById(c *gin.Context, userId string)

	// (PATCH /api/users/{user_id})
	UpdateUserDetails(c *gin.Context, userId string)

	// (GET /api/wishlist/)
	GetWishlistItems(c *gin.Context)

	// (DELETE /api/wishlist/items/{product_id})
	DeleteItemFromWishlist(c *gin.Context, productId string)

	// (POST /api/wishlist/items/{product_id})
	AddItemToWishlist(c *gin.Context, productId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SuspendProduct operation middleware
func (siw *ServerInterfaceWrapper) SuspendProduct(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SuspendProduct(c, productId)
}

// SuspendUser operation middleware
func (siw *ServerInterfaceWrapper) SuspendUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SuspendUser(c, userId)
}

// GetAllTransactions operation middleware
func (siw *ServerInterfaceWrapper) GetAllTransactions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllTransactions(c)
}

// RecoverPassword operation middleware
func (siw *ServerInterfaceWrapper) RecoverPassword(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RecoverPassword(c)
}

// SignIn operation middleware
func (siw *ServerInterfaceWrapper) SignIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignIn(c)
}

// SignOut operation middleware
func (siw *ServerInterfaceWrapper) SignOut(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignOut(c)
}

// SignUp operation middleware
func (siw *ServerInterfaceWrapper) SignUp(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SignUp(c)
}

// GetCartItems operation middleware
func (siw *ServerInterfaceWrapper) GetCartItems(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCartItems(c)
}

// DeleteItemFromCart operation middleware
func (siw *ServerInterfaceWrapper) DeleteItemFromCart(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteItemFromCart(c, productId)
}

// UpdateItemQuantity operation middleware
func (siw *ServerInterfaceWrapper) UpdateItemQuantity(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateItemQuantity(c, productId)
}

// AddItemToCart operation middleware
func (siw *ServerInterfaceWrapper) AddItemToCart(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddItemToCart(c, productId)
}

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrders(c)
}

// GetOrderById operation middleware
func (siw *ServerInterfaceWrapper) GetOrderById(c *gin.Context) {

	var err error

	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", c.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrderById(c, orderId)
}

// CancelOrder operation middleware
func (siw *ServerInterfaceWrapper) CancelOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", c.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CancelOrder(c, orderId)
}

// UpdateOrder operation middleware
func (siw *ServerInterfaceWrapper) UpdateOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", c.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateOrder(c, orderId)
}

// GetProducts operation middleware
func (siw *ServerInterfaceWrapper) GetProducts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProducts(c)
}

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProduct(c)
}

// DeleteProductById operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductById(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProductById(c, productId)
}

// GetProductById operation middleware
func (siw *ServerInterfaceWrapper) GetProductById(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductById(c, productId)
}

// UpdateProductById operation middleware
func (siw *ServerInterfaceWrapper) UpdateProductById(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProductById(c, productId)
}

// UploadProductAttachment operation middleware
func (siw *ServerInterfaceWrapper) UploadProductAttachment(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UploadProductAttachment(c, productId)
}

// GetProductAttachmentById operation middleware
func (siw *ServerInterfaceWrapper) GetProductAttachmentById(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "attachement_id" -------------
	var attachementId string

	err = runtime.BindStyledParameterWithOptions("simple", "attachement_id", c.Param("attachement_id"), &attachementId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter attachement_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductAttachmentById(c, productId, attachementId)
}

// GetProductQuestions operation middleware
func (siw *ServerInterfaceWrapper) GetProductQuestions(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductQuestions(c, productId)
}

// PostProductQuestion operation middleware
func (siw *ServerInterfaceWrapper) PostProductQuestion(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProductQuestion(c, productId)
}

// PostQuestionAnswer operation middleware
func (siw *ServerInterfaceWrapper) PostQuestionAnswer(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "question_id" -------------
	var questionId string

	err = runtime.BindStyledParameterWithOptions("simple", "question_id", c.Param("question_id"), &questionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter question_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostQuestionAnswer(c, productId, questionId)
}

// GetProductReviews operation middleware
func (siw *ServerInterfaceWrapper) GetProductReviews(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProductReviews(c, productId)
}

// PostProductReview operation middleware
func (siw *ServerInterfaceWrapper) PostProductReview(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProductReview(c, productId)
}

// RespondToReview operation middleware
func (siw *ServerInterfaceWrapper) RespondToReview(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "review_id" -------------
	var reviewId string

	err = runtime.BindStyledParameterWithOptions("simple", "review_id", c.Param("review_id"), &reviewId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter review_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RespondToReview(c, productId, reviewId)
}

// DeleteProductAttachmentById operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductAttachmentById(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "attachement_id" -------------
	var attachementId string

	err = runtime.BindStyledParameterWithOptions("simple", "attachement_id", c.Param("attachement_id"), &attachementId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter attachement_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProductAttachmentById(c, productId, attachementId)
}

// GetInventory operation middleware
func (siw *ServerInterfaceWrapper) GetInventory(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetInventory(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// SearchUsers operation middleware
func (siw *ServerInterfaceWrapper) SearchUsers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUsersParams

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument query is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchUsers(c, params)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, userId)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserById(c, userId)
}

// UpdateUserDetails operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserDetails(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserDetails(c, userId)
}

// GetWishlistItems operation middleware
func (siw *ServerInterfaceWrapper) GetWishlistItems(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetWishlistItems(c)
}

// DeleteItemFromWishlist operation middleware
func (siw *ServerInterfaceWrapper) DeleteItemFromWishlist(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteItemFromWishlist(c, productId)
}

// AddItemToWishlist operation middleware
func (siw *ServerInterfaceWrapper) AddItemToWishlist(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddItemToWishlist(c, productId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PATCH(options.BaseURL+"/api/admin/suspend/product/:product_id", wrapper.SuspendProduct)
	router.PATCH(options.BaseURL+"/api/admin/suspend/user/:user_id", wrapper.SuspendUser)
	router.GET(options.BaseURL+"/api/admin/transactions", wrapper.GetAllTransactions)
	router.POST(options.BaseURL+"/api/auth/recover_password", wrapper.RecoverPassword)
	router.POST(options.BaseURL+"/api/auth/sign_in", wrapper.SignIn)
	router.GET(options.BaseURL+"/api/auth/sign_out", wrapper.SignOut)
	router.POST(options.BaseURL+"/api/auth/sign_up", wrapper.SignUp)
	router.GET(options.BaseURL+"/api/cart/", wrapper.GetCartItems)
	router.DELETE(options.BaseURL+"/api/cart/items/:product_id", wrapper.DeleteItemFromCart)
	router.PATCH(options.BaseURL+"/api/cart/items/:product_id", wrapper.UpdateItemQuantity)
	router.POST(options.BaseURL+"/api/cart/items/:product_id", wrapper.AddItemToCart)
	router.GET(options.BaseURL+"/api/orders/", wrapper.GetOrders)
	router.GET(options.BaseURL+"/api/orders/items/:order_id", wrapper.GetOrderById)
	router.PATCH(options.BaseURL+"/api/orders/items/:order_id/cancel", wrapper.CancelOrder)
	router.PATCH(options.BaseURL+"/api/orders/items/:order_id/update", wrapper.UpdateOrder)
	router.GET(options.BaseURL+"/api/products/", wrapper.GetProducts)
	router.POST(options.BaseURL+"/api/products/", wrapper.CreateProduct)
	router.DELETE(options.BaseURL+"/api/products/:product_id", wrapper.DeleteProductById)
	router.GET(options.BaseURL+"/api/products/:product_id", wrapper.GetProductById)
	router.PUT(options.BaseURL+"/api/products/:product_id", wrapper.UpdateProductById)
	router.POST(options.BaseURL+"/api/products/:product_id/attachement", wrapper.UploadProductAttachment)
	router.GET(options.BaseURL+"/api/products/:product_id/attachement/:attachement_id", wrapper.GetProductAttachmentById)
	router.GET(options.BaseURL+"/api/products/:product_id/questions", wrapper.GetProductQuestions)
	router.POST(options.BaseURL+"/api/products/:product_id/questions", wrapper.PostProductQuestion)
	router.POST(options.BaseURL+"/api/products/:product_id/questions/:question_id/respond", wrapper.PostQuestionAnswer)
	router.GET(options.BaseURL+"/api/products/:product_id/reviews", wrapper.GetProductReviews)
	router.POST(options.BaseURL+"/api/products/:product_id/reviews", wrapper.PostProductReview)
	router.POST(options.BaseURL+"/api/products/:product_id/reviews/:review_id/respond", wrapper.RespondToReview)
	router.DELETE(options.BaseURL+"/api/products/:product_idattachement/:attachement_id", wrapper.DeleteProductAttachmentById)
	router.GET(options.BaseURL+"/api/sellers/inventory", wrapper.GetInventory)
	router.GET(options.BaseURL+"/api/users/", wrapper.GetUsers)
	router.GET(options.BaseURL+"/api/users/search", wrapper.SearchUsers)
	router.DELETE(options.BaseURL+"/api/users/:user_id", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/api/users/:user_id", wrapper.GetUserById)
	router.PATCH(options.BaseURL+"/api/users/:user_id", wrapper.UpdateUserDetails)
	router.GET(options.BaseURL+"/api/wishlist/", wrapper.GetWishlistItems)
	router.DELETE(options.BaseURL+"/api/wishlist/items/:product_id", wrapper.DeleteItemFromWishlist)
	router.POST(options.BaseURL+"/api/wishlist/items/:product_id", wrapper.AddItemToWishlist)
}
