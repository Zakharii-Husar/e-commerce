// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReviewsResponse is an object representing the database table.
type ReviewsResponse struct {
	ID           int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID       int64 `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ReviewID     int64 `boil:"review_id" json:"review_id" toml:"review_id" yaml:"review_id"`
	ResponseText int64 `boil:"response_text" json:"response_text" toml:"response_text" yaml:"response_text"`

	R *reviewsResponseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reviewsResponseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReviewsResponseColumns = struct {
	ID           string
	UserID       string
	ReviewID     string
	ResponseText string
}{
	ID:           "id",
	UserID:       "user_id",
	ReviewID:     "review_id",
	ResponseText: "response_text",
}

var ReviewsResponseTableColumns = struct {
	ID           string
	UserID       string
	ReviewID     string
	ResponseText string
}{
	ID:           "reviews_responses.id",
	UserID:       "reviews_responses.user_id",
	ReviewID:     "reviews_responses.review_id",
	ResponseText: "reviews_responses.response_text",
}

// Generated where

var ReviewsResponseWhere = struct {
	ID           whereHelperint64
	UserID       whereHelperint64
	ReviewID     whereHelperint64
	ResponseText whereHelperint64
}{
	ID:           whereHelperint64{field: "\"reviews_responses\".\"id\""},
	UserID:       whereHelperint64{field: "\"reviews_responses\".\"user_id\""},
	ReviewID:     whereHelperint64{field: "\"reviews_responses\".\"review_id\""},
	ResponseText: whereHelperint64{field: "\"reviews_responses\".\"response_text\""},
}

// ReviewsResponseRels is where relationship names are stored.
var ReviewsResponseRels = struct {
	Review string
	User   string
}{
	Review: "Review",
	User:   "User",
}

// reviewsResponseR is where relationships are stored.
type reviewsResponseR struct {
	Review *Review `boil:"Review" json:"Review" toml:"Review" yaml:"Review"`
	User   *User   `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*reviewsResponseR) NewStruct() *reviewsResponseR {
	return &reviewsResponseR{}
}

func (r *reviewsResponseR) GetReview() *Review {
	if r == nil {
		return nil
	}
	return r.Review
}

func (r *reviewsResponseR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// reviewsResponseL is where Load methods for each relationship are stored.
type reviewsResponseL struct{}

var (
	reviewsResponseAllColumns            = []string{"id", "user_id", "review_id", "response_text"}
	reviewsResponseColumnsWithoutDefault = []string{"user_id", "review_id", "response_text"}
	reviewsResponseColumnsWithDefault    = []string{"id"}
	reviewsResponsePrimaryKeyColumns     = []string{"id"}
	reviewsResponseGeneratedColumns      = []string{}
)

type (
	// ReviewsResponseSlice is an alias for a slice of pointers to ReviewsResponse.
	// This should almost always be used instead of []ReviewsResponse.
	ReviewsResponseSlice []*ReviewsResponse
	// ReviewsResponseHook is the signature for custom ReviewsResponse hook methods
	ReviewsResponseHook func(context.Context, boil.ContextExecutor, *ReviewsResponse) error

	reviewsResponseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reviewsResponseType                 = reflect.TypeOf(&ReviewsResponse{})
	reviewsResponseMapping              = queries.MakeStructMapping(reviewsResponseType)
	reviewsResponsePrimaryKeyMapping, _ = queries.BindMapping(reviewsResponseType, reviewsResponseMapping, reviewsResponsePrimaryKeyColumns)
	reviewsResponseInsertCacheMut       sync.RWMutex
	reviewsResponseInsertCache          = make(map[string]insertCache)
	reviewsResponseUpdateCacheMut       sync.RWMutex
	reviewsResponseUpdateCache          = make(map[string]updateCache)
	reviewsResponseUpsertCacheMut       sync.RWMutex
	reviewsResponseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reviewsResponseAfterSelectMu sync.Mutex
var reviewsResponseAfterSelectHooks []ReviewsResponseHook

var reviewsResponseBeforeInsertMu sync.Mutex
var reviewsResponseBeforeInsertHooks []ReviewsResponseHook
var reviewsResponseAfterInsertMu sync.Mutex
var reviewsResponseAfterInsertHooks []ReviewsResponseHook

var reviewsResponseBeforeUpdateMu sync.Mutex
var reviewsResponseBeforeUpdateHooks []ReviewsResponseHook
var reviewsResponseAfterUpdateMu sync.Mutex
var reviewsResponseAfterUpdateHooks []ReviewsResponseHook

var reviewsResponseBeforeDeleteMu sync.Mutex
var reviewsResponseBeforeDeleteHooks []ReviewsResponseHook
var reviewsResponseAfterDeleteMu sync.Mutex
var reviewsResponseAfterDeleteHooks []ReviewsResponseHook

var reviewsResponseBeforeUpsertMu sync.Mutex
var reviewsResponseBeforeUpsertHooks []ReviewsResponseHook
var reviewsResponseAfterUpsertMu sync.Mutex
var reviewsResponseAfterUpsertHooks []ReviewsResponseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReviewsResponse) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsResponseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReviewsResponse) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsResponseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReviewsResponse) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsResponseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReviewsResponse) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsResponseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReviewsResponse) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsResponseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReviewsResponse) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsResponseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReviewsResponse) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsResponseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReviewsResponse) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsResponseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReviewsResponse) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsResponseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReviewsResponseHook registers your hook function for all future operations.
func AddReviewsResponseHook(hookPoint boil.HookPoint, reviewsResponseHook ReviewsResponseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reviewsResponseAfterSelectMu.Lock()
		reviewsResponseAfterSelectHooks = append(reviewsResponseAfterSelectHooks, reviewsResponseHook)
		reviewsResponseAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		reviewsResponseBeforeInsertMu.Lock()
		reviewsResponseBeforeInsertHooks = append(reviewsResponseBeforeInsertHooks, reviewsResponseHook)
		reviewsResponseBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		reviewsResponseAfterInsertMu.Lock()
		reviewsResponseAfterInsertHooks = append(reviewsResponseAfterInsertHooks, reviewsResponseHook)
		reviewsResponseAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		reviewsResponseBeforeUpdateMu.Lock()
		reviewsResponseBeforeUpdateHooks = append(reviewsResponseBeforeUpdateHooks, reviewsResponseHook)
		reviewsResponseBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		reviewsResponseAfterUpdateMu.Lock()
		reviewsResponseAfterUpdateHooks = append(reviewsResponseAfterUpdateHooks, reviewsResponseHook)
		reviewsResponseAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		reviewsResponseBeforeDeleteMu.Lock()
		reviewsResponseBeforeDeleteHooks = append(reviewsResponseBeforeDeleteHooks, reviewsResponseHook)
		reviewsResponseBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		reviewsResponseAfterDeleteMu.Lock()
		reviewsResponseAfterDeleteHooks = append(reviewsResponseAfterDeleteHooks, reviewsResponseHook)
		reviewsResponseAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		reviewsResponseBeforeUpsertMu.Lock()
		reviewsResponseBeforeUpsertHooks = append(reviewsResponseBeforeUpsertHooks, reviewsResponseHook)
		reviewsResponseBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		reviewsResponseAfterUpsertMu.Lock()
		reviewsResponseAfterUpsertHooks = append(reviewsResponseAfterUpsertHooks, reviewsResponseHook)
		reviewsResponseAfterUpsertMu.Unlock()
	}
}

// One returns a single reviewsResponse record from the query.
func (q reviewsResponseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReviewsResponse, error) {
	o := &ReviewsResponse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reviews_responses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReviewsResponse records from the query.
func (q reviewsResponseQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReviewsResponseSlice, error) {
	var o []*ReviewsResponse

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReviewsResponse slice")
	}

	if len(reviewsResponseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReviewsResponse records in the query.
func (q reviewsResponseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reviews_responses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reviewsResponseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reviews_responses exists")
	}

	return count > 0, nil
}

// Review pointed to by the foreign key.
func (o *ReviewsResponse) Review(mods ...qm.QueryMod) reviewQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ReviewID),
	}

	queryMods = append(queryMods, mods...)

	return Reviews(queryMods...)
}

// User pointed to by the foreign key.
func (o *ReviewsResponse) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadReview allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewsResponseL) LoadReview(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewsResponse interface{}, mods queries.Applicator) error {
	var slice []*ReviewsResponse
	var object *ReviewsResponse

	if singular {
		var ok bool
		object, ok = maybeReviewsResponse.(*ReviewsResponse)
		if !ok {
			object = new(ReviewsResponse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewsResponse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewsResponse))
			}
		}
	} else {
		s, ok := maybeReviewsResponse.(*[]*ReviewsResponse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewsResponse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewsResponse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reviewsResponseR{}
		}
		args[object.ReviewID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewsResponseR{}
			}

			args[obj.ReviewID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`reviews`),
		qm.WhereIn(`reviews.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Review")
	}

	var resultSlice []*Review
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Review")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for reviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reviews")
	}

	if len(reviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Review = foreign
		if foreign.R == nil {
			foreign.R = &reviewR{}
		}
		foreign.R.ReviewsResponses = append(foreign.R.ReviewsResponses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReviewID == foreign.ID {
				local.R.Review = foreign
				if foreign.R == nil {
					foreign.R = &reviewR{}
				}
				foreign.R.ReviewsResponses = append(foreign.R.ReviewsResponses, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewsResponseL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewsResponse interface{}, mods queries.Applicator) error {
	var slice []*ReviewsResponse
	var object *ReviewsResponse

	if singular {
		var ok bool
		object, ok = maybeReviewsResponse.(*ReviewsResponse)
		if !ok {
			object = new(ReviewsResponse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewsResponse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewsResponse))
			}
		}
	} else {
		s, ok := maybeReviewsResponse.(*[]*ReviewsResponse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewsResponse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewsResponse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reviewsResponseR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewsResponseR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ReviewsResponses = append(foreign.R.ReviewsResponses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ReviewsResponses = append(foreign.R.ReviewsResponses, local)
				break
			}
		}
	}

	return nil
}

// SetReview of the reviewsResponse to the related item.
// Sets o.R.Review to related.
// Adds o to related.R.ReviewsResponses.
func (o *ReviewsResponse) SetReview(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Review) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reviews_responses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"review_id"}),
		strmangle.WhereClause("\"", "\"", 2, reviewsResponsePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReviewID = related.ID
	if o.R == nil {
		o.R = &reviewsResponseR{
			Review: related,
		}
	} else {
		o.R.Review = related
	}

	if related.R == nil {
		related.R = &reviewR{
			ReviewsResponses: ReviewsResponseSlice{o},
		}
	} else {
		related.R.ReviewsResponses = append(related.R.ReviewsResponses, o)
	}

	return nil
}

// SetUser of the reviewsResponse to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ReviewsResponses.
func (o *ReviewsResponse) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reviews_responses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, reviewsResponsePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &reviewsResponseR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ReviewsResponses: ReviewsResponseSlice{o},
		}
	} else {
		related.R.ReviewsResponses = append(related.R.ReviewsResponses, o)
	}

	return nil
}

// ReviewsResponses retrieves all the records using an executor.
func ReviewsResponses(mods ...qm.QueryMod) reviewsResponseQuery {
	mods = append(mods, qm.From("\"reviews_responses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reviews_responses\".*"})
	}

	return reviewsResponseQuery{q}
}

// FindReviewsResponse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReviewsResponse(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ReviewsResponse, error) {
	reviewsResponseObj := &ReviewsResponse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reviews_responses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, reviewsResponseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reviews_responses")
	}

	if err = reviewsResponseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reviewsResponseObj, err
	}

	return reviewsResponseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReviewsResponse) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reviews_responses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewsResponseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reviewsResponseInsertCacheMut.RLock()
	cache, cached := reviewsResponseInsertCache[key]
	reviewsResponseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reviewsResponseAllColumns,
			reviewsResponseColumnsWithDefault,
			reviewsResponseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reviewsResponseType, reviewsResponseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reviewsResponseType, reviewsResponseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reviews_responses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reviews_responses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reviews_responses")
	}

	if !cached {
		reviewsResponseInsertCacheMut.Lock()
		reviewsResponseInsertCache[key] = cache
		reviewsResponseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReviewsResponse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReviewsResponse) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reviewsResponseUpdateCacheMut.RLock()
	cache, cached := reviewsResponseUpdateCache[key]
	reviewsResponseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reviewsResponseAllColumns,
			reviewsResponsePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reviews_responses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reviews_responses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, reviewsResponsePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reviewsResponseType, reviewsResponseMapping, append(wl, reviewsResponsePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reviews_responses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reviews_responses")
	}

	if !cached {
		reviewsResponseUpdateCacheMut.Lock()
		reviewsResponseUpdateCache[key] = cache
		reviewsResponseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reviewsResponseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reviews_responses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reviews_responses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReviewsResponseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewsResponsePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reviews_responses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, reviewsResponsePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reviewsResponse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reviewsResponse")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReviewsResponse) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no reviews_responses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewsResponseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reviewsResponseUpsertCacheMut.RLock()
	cache, cached := reviewsResponseUpsertCache[key]
	reviewsResponseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			reviewsResponseAllColumns,
			reviewsResponseColumnsWithDefault,
			reviewsResponseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			reviewsResponseAllColumns,
			reviewsResponsePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reviews_responses, could not build update column list")
		}

		ret := strmangle.SetComplement(reviewsResponseAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(reviewsResponsePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert reviews_responses, could not build conflict column list")
			}

			conflict = make([]string, len(reviewsResponsePrimaryKeyColumns))
			copy(conflict, reviewsResponsePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"reviews_responses\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(reviewsResponseType, reviewsResponseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reviewsResponseType, reviewsResponseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reviews_responses")
	}

	if !cached {
		reviewsResponseUpsertCacheMut.Lock()
		reviewsResponseUpsertCache[key] = cache
		reviewsResponseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReviewsResponse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReviewsResponse) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReviewsResponse provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reviewsResponsePrimaryKeyMapping)
	sql := "DELETE FROM \"reviews_responses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reviews_responses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reviews_responses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reviewsResponseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reviewsResponseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reviews_responses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reviews_responses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReviewsResponseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reviewsResponseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewsResponsePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reviews_responses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reviewsResponsePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reviewsResponse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reviews_responses")
	}

	if len(reviewsResponseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReviewsResponse) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReviewsResponse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReviewsResponseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReviewsResponseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewsResponsePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reviews_responses\".* FROM \"reviews_responses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reviewsResponsePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReviewsResponseSlice")
	}

	*o = slice

	return nil
}

// ReviewsResponseExists checks if the ReviewsResponse row exists.
func ReviewsResponseExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reviews_responses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reviews_responses exists")
	}

	return exists, nil
}

// Exists checks if the ReviewsResponse row exists.
func (o *ReviewsResponse) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReviewsResponseExists(ctx, exec, o.ID)
}
