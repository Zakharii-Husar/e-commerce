// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReviewsReport is an object representing the database table.
type ReviewsReport struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ReviewID   int64     `boil:"review_id" json:"review_id" toml:"review_id" yaml:"review_id"`
	ReporterID int64     `boil:"reporter_id" json:"reporter_id" toml:"reporter_id" yaml:"reporter_id"`
	Timestamp  time.Time `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	// fraud, bad quality etc
	ReportType        string `boil:"report_type" json:"report_type" toml:"report_type" yaml:"report_type"`
	ReportDescription string `boil:"report_description" json:"report_description" toml:"report_description" yaml:"report_description"`
	// eg pending, approved, declined
	ReportStatus int64 `boil:"report_status" json:"report_status" toml:"report_status" yaml:"report_status"`

	R *reviewsReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reviewsReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReviewsReportColumns = struct {
	ID                string
	ReviewID          string
	ReporterID        string
	Timestamp         string
	ReportType        string
	ReportDescription string
	ReportStatus      string
}{
	ID:                "id",
	ReviewID:          "review_id",
	ReporterID:        "reporter_id",
	Timestamp:         "timestamp",
	ReportType:        "report_type",
	ReportDescription: "report_description",
	ReportStatus:      "report_status",
}

var ReviewsReportTableColumns = struct {
	ID                string
	ReviewID          string
	ReporterID        string
	Timestamp         string
	ReportType        string
	ReportDescription string
	ReportStatus      string
}{
	ID:                "reviews_reports.id",
	ReviewID:          "reviews_reports.review_id",
	ReporterID:        "reviews_reports.reporter_id",
	Timestamp:         "reviews_reports.timestamp",
	ReportType:        "reviews_reports.report_type",
	ReportDescription: "reviews_reports.report_description",
	ReportStatus:      "reviews_reports.report_status",
}

// Generated where

var ReviewsReportWhere = struct {
	ID                whereHelperint64
	ReviewID          whereHelperint64
	ReporterID        whereHelperint64
	Timestamp         whereHelpertime_Time
	ReportType        whereHelperstring
	ReportDescription whereHelperstring
	ReportStatus      whereHelperint64
}{
	ID:                whereHelperint64{field: "\"reviews_reports\".\"id\""},
	ReviewID:          whereHelperint64{field: "\"reviews_reports\".\"review_id\""},
	ReporterID:        whereHelperint64{field: "\"reviews_reports\".\"reporter_id\""},
	Timestamp:         whereHelpertime_Time{field: "\"reviews_reports\".\"timestamp\""},
	ReportType:        whereHelperstring{field: "\"reviews_reports\".\"report_type\""},
	ReportDescription: whereHelperstring{field: "\"reviews_reports\".\"report_description\""},
	ReportStatus:      whereHelperint64{field: "\"reviews_reports\".\"report_status\""},
}

// ReviewsReportRels is where relationship names are stored.
var ReviewsReportRels = struct {
	Reporter string
	Review   string
}{
	Reporter: "Reporter",
	Review:   "Review",
}

// reviewsReportR is where relationships are stored.
type reviewsReportR struct {
	Reporter *User   `boil:"Reporter" json:"Reporter" toml:"Reporter" yaml:"Reporter"`
	Review   *Review `boil:"Review" json:"Review" toml:"Review" yaml:"Review"`
}

// NewStruct creates a new relationship struct
func (*reviewsReportR) NewStruct() *reviewsReportR {
	return &reviewsReportR{}
}

func (r *reviewsReportR) GetReporter() *User {
	if r == nil {
		return nil
	}
	return r.Reporter
}

func (r *reviewsReportR) GetReview() *Review {
	if r == nil {
		return nil
	}
	return r.Review
}

// reviewsReportL is where Load methods for each relationship are stored.
type reviewsReportL struct{}

var (
	reviewsReportAllColumns            = []string{"id", "review_id", "reporter_id", "timestamp", "report_type", "report_description", "report_status"}
	reviewsReportColumnsWithoutDefault = []string{"review_id", "reporter_id", "timestamp", "report_type", "report_description", "report_status"}
	reviewsReportColumnsWithDefault    = []string{"id"}
	reviewsReportPrimaryKeyColumns     = []string{"id"}
	reviewsReportGeneratedColumns      = []string{}
)

type (
	// ReviewsReportSlice is an alias for a slice of pointers to ReviewsReport.
	// This should almost always be used instead of []ReviewsReport.
	ReviewsReportSlice []*ReviewsReport
	// ReviewsReportHook is the signature for custom ReviewsReport hook methods
	ReviewsReportHook func(context.Context, boil.ContextExecutor, *ReviewsReport) error

	reviewsReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reviewsReportType                 = reflect.TypeOf(&ReviewsReport{})
	reviewsReportMapping              = queries.MakeStructMapping(reviewsReportType)
	reviewsReportPrimaryKeyMapping, _ = queries.BindMapping(reviewsReportType, reviewsReportMapping, reviewsReportPrimaryKeyColumns)
	reviewsReportInsertCacheMut       sync.RWMutex
	reviewsReportInsertCache          = make(map[string]insertCache)
	reviewsReportUpdateCacheMut       sync.RWMutex
	reviewsReportUpdateCache          = make(map[string]updateCache)
	reviewsReportUpsertCacheMut       sync.RWMutex
	reviewsReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reviewsReportAfterSelectMu sync.Mutex
var reviewsReportAfterSelectHooks []ReviewsReportHook

var reviewsReportBeforeInsertMu sync.Mutex
var reviewsReportBeforeInsertHooks []ReviewsReportHook
var reviewsReportAfterInsertMu sync.Mutex
var reviewsReportAfterInsertHooks []ReviewsReportHook

var reviewsReportBeforeUpdateMu sync.Mutex
var reviewsReportBeforeUpdateHooks []ReviewsReportHook
var reviewsReportAfterUpdateMu sync.Mutex
var reviewsReportAfterUpdateHooks []ReviewsReportHook

var reviewsReportBeforeDeleteMu sync.Mutex
var reviewsReportBeforeDeleteHooks []ReviewsReportHook
var reviewsReportAfterDeleteMu sync.Mutex
var reviewsReportAfterDeleteHooks []ReviewsReportHook

var reviewsReportBeforeUpsertMu sync.Mutex
var reviewsReportBeforeUpsertHooks []ReviewsReportHook
var reviewsReportAfterUpsertMu sync.Mutex
var reviewsReportAfterUpsertHooks []ReviewsReportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReviewsReport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsReportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReviewsReport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsReportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReviewsReport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsReportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReviewsReport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsReportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReviewsReport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsReportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReviewsReport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsReportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReviewsReport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsReportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReviewsReport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsReportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReviewsReport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewsReportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReviewsReportHook registers your hook function for all future operations.
func AddReviewsReportHook(hookPoint boil.HookPoint, reviewsReportHook ReviewsReportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reviewsReportAfterSelectMu.Lock()
		reviewsReportAfterSelectHooks = append(reviewsReportAfterSelectHooks, reviewsReportHook)
		reviewsReportAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		reviewsReportBeforeInsertMu.Lock()
		reviewsReportBeforeInsertHooks = append(reviewsReportBeforeInsertHooks, reviewsReportHook)
		reviewsReportBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		reviewsReportAfterInsertMu.Lock()
		reviewsReportAfterInsertHooks = append(reviewsReportAfterInsertHooks, reviewsReportHook)
		reviewsReportAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		reviewsReportBeforeUpdateMu.Lock()
		reviewsReportBeforeUpdateHooks = append(reviewsReportBeforeUpdateHooks, reviewsReportHook)
		reviewsReportBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		reviewsReportAfterUpdateMu.Lock()
		reviewsReportAfterUpdateHooks = append(reviewsReportAfterUpdateHooks, reviewsReportHook)
		reviewsReportAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		reviewsReportBeforeDeleteMu.Lock()
		reviewsReportBeforeDeleteHooks = append(reviewsReportBeforeDeleteHooks, reviewsReportHook)
		reviewsReportBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		reviewsReportAfterDeleteMu.Lock()
		reviewsReportAfterDeleteHooks = append(reviewsReportAfterDeleteHooks, reviewsReportHook)
		reviewsReportAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		reviewsReportBeforeUpsertMu.Lock()
		reviewsReportBeforeUpsertHooks = append(reviewsReportBeforeUpsertHooks, reviewsReportHook)
		reviewsReportBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		reviewsReportAfterUpsertMu.Lock()
		reviewsReportAfterUpsertHooks = append(reviewsReportAfterUpsertHooks, reviewsReportHook)
		reviewsReportAfterUpsertMu.Unlock()
	}
}

// One returns a single reviewsReport record from the query.
func (q reviewsReportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReviewsReport, error) {
	o := &ReviewsReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reviews_reports")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReviewsReport records from the query.
func (q reviewsReportQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReviewsReportSlice, error) {
	var o []*ReviewsReport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReviewsReport slice")
	}

	if len(reviewsReportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReviewsReport records in the query.
func (q reviewsReportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reviews_reports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reviewsReportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reviews_reports exists")
	}

	return count > 0, nil
}

// Reporter pointed to by the foreign key.
func (o *ReviewsReport) Reporter(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ReporterID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Review pointed to by the foreign key.
func (o *ReviewsReport) Review(mods ...qm.QueryMod) reviewQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ReviewID),
	}

	queryMods = append(queryMods, mods...)

	return Reviews(queryMods...)
}

// LoadReporter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewsReportL) LoadReporter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewsReport interface{}, mods queries.Applicator) error {
	var slice []*ReviewsReport
	var object *ReviewsReport

	if singular {
		var ok bool
		object, ok = maybeReviewsReport.(*ReviewsReport)
		if !ok {
			object = new(ReviewsReport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewsReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewsReport))
			}
		}
	} else {
		s, ok := maybeReviewsReport.(*[]*ReviewsReport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewsReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewsReport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reviewsReportR{}
		}
		args[object.ReporterID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewsReportR{}
			}

			args[obj.ReporterID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reporter = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ReporterReviewsReports = append(foreign.R.ReporterReviewsReports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReporterID == foreign.ID {
				local.R.Reporter = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ReporterReviewsReports = append(foreign.R.ReporterReviewsReports, local)
				break
			}
		}
	}

	return nil
}

// LoadReview allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewsReportL) LoadReview(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewsReport interface{}, mods queries.Applicator) error {
	var slice []*ReviewsReport
	var object *ReviewsReport

	if singular {
		var ok bool
		object, ok = maybeReviewsReport.(*ReviewsReport)
		if !ok {
			object = new(ReviewsReport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewsReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewsReport))
			}
		}
	} else {
		s, ok := maybeReviewsReport.(*[]*ReviewsReport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewsReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewsReport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reviewsReportR{}
		}
		args[object.ReviewID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewsReportR{}
			}

			args[obj.ReviewID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`reviews`),
		qm.WhereIn(`reviews.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Review")
	}

	var resultSlice []*Review
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Review")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for reviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reviews")
	}

	if len(reviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Review = foreign
		if foreign.R == nil {
			foreign.R = &reviewR{}
		}
		foreign.R.ReviewsReports = append(foreign.R.ReviewsReports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReviewID == foreign.ID {
				local.R.Review = foreign
				if foreign.R == nil {
					foreign.R = &reviewR{}
				}
				foreign.R.ReviewsReports = append(foreign.R.ReviewsReports, local)
				break
			}
		}
	}

	return nil
}

// SetReporter of the reviewsReport to the related item.
// Sets o.R.Reporter to related.
// Adds o to related.R.ReporterReviewsReports.
func (o *ReviewsReport) SetReporter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reviews_reports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"reporter_id"}),
		strmangle.WhereClause("\"", "\"", 2, reviewsReportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReporterID = related.ID
	if o.R == nil {
		o.R = &reviewsReportR{
			Reporter: related,
		}
	} else {
		o.R.Reporter = related
	}

	if related.R == nil {
		related.R = &userR{
			ReporterReviewsReports: ReviewsReportSlice{o},
		}
	} else {
		related.R.ReporterReviewsReports = append(related.R.ReporterReviewsReports, o)
	}

	return nil
}

// SetReview of the reviewsReport to the related item.
// Sets o.R.Review to related.
// Adds o to related.R.ReviewsReports.
func (o *ReviewsReport) SetReview(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Review) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reviews_reports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"review_id"}),
		strmangle.WhereClause("\"", "\"", 2, reviewsReportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReviewID = related.ID
	if o.R == nil {
		o.R = &reviewsReportR{
			Review: related,
		}
	} else {
		o.R.Review = related
	}

	if related.R == nil {
		related.R = &reviewR{
			ReviewsReports: ReviewsReportSlice{o},
		}
	} else {
		related.R.ReviewsReports = append(related.R.ReviewsReports, o)
	}

	return nil
}

// ReviewsReports retrieves all the records using an executor.
func ReviewsReports(mods ...qm.QueryMod) reviewsReportQuery {
	mods = append(mods, qm.From("\"reviews_reports\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reviews_reports\".*"})
	}

	return reviewsReportQuery{q}
}

// FindReviewsReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReviewsReport(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ReviewsReport, error) {
	reviewsReportObj := &ReviewsReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reviews_reports\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, reviewsReportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reviews_reports")
	}

	if err = reviewsReportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reviewsReportObj, err
	}

	return reviewsReportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReviewsReport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reviews_reports provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewsReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reviewsReportInsertCacheMut.RLock()
	cache, cached := reviewsReportInsertCache[key]
	reviewsReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reviewsReportAllColumns,
			reviewsReportColumnsWithDefault,
			reviewsReportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reviewsReportType, reviewsReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reviewsReportType, reviewsReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reviews_reports\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reviews_reports\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reviews_reports")
	}

	if !cached {
		reviewsReportInsertCacheMut.Lock()
		reviewsReportInsertCache[key] = cache
		reviewsReportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReviewsReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReviewsReport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reviewsReportUpdateCacheMut.RLock()
	cache, cached := reviewsReportUpdateCache[key]
	reviewsReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reviewsReportAllColumns,
			reviewsReportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reviews_reports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reviews_reports\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, reviewsReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reviewsReportType, reviewsReportMapping, append(wl, reviewsReportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reviews_reports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reviews_reports")
	}

	if !cached {
		reviewsReportUpdateCacheMut.Lock()
		reviewsReportUpdateCache[key] = cache
		reviewsReportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reviewsReportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reviews_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reviews_reports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReviewsReportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewsReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reviews_reports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, reviewsReportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reviewsReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reviewsReport")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReviewsReport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no reviews_reports provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewsReportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reviewsReportUpsertCacheMut.RLock()
	cache, cached := reviewsReportUpsertCache[key]
	reviewsReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			reviewsReportAllColumns,
			reviewsReportColumnsWithDefault,
			reviewsReportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			reviewsReportAllColumns,
			reviewsReportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reviews_reports, could not build update column list")
		}

		ret := strmangle.SetComplement(reviewsReportAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(reviewsReportPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert reviews_reports, could not build conflict column list")
			}

			conflict = make([]string, len(reviewsReportPrimaryKeyColumns))
			copy(conflict, reviewsReportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"reviews_reports\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(reviewsReportType, reviewsReportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reviewsReportType, reviewsReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reviews_reports")
	}

	if !cached {
		reviewsReportUpsertCacheMut.Lock()
		reviewsReportUpsertCache[key] = cache
		reviewsReportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ReviewsReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReviewsReport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReviewsReport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reviewsReportPrimaryKeyMapping)
	sql := "DELETE FROM \"reviews_reports\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reviews_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reviews_reports")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reviewsReportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reviewsReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reviews_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reviews_reports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReviewsReportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reviewsReportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewsReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reviews_reports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reviewsReportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reviewsReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reviews_reports")
	}

	if len(reviewsReportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReviewsReport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReviewsReport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReviewsReportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReviewsReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewsReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reviews_reports\".* FROM \"reviews_reports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reviewsReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReviewsReportSlice")
	}

	*o = slice

	return nil
}

// ReviewsReportExists checks if the ReviewsReport row exists.
func ReviewsReportExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reviews_reports\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reviews_reports exists")
	}

	return exists, nil
}

// Exists checks if the ReviewsReport row exists.
func (o *ReviewsReport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReviewsReportExists(ctx, exec, o.ID)
}
